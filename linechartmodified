base = alt.Chart(filtered_df).transform_calculate(
    line12=f"'{primlinechartvar}'",
    shade12=f"'{linechartvar}'"
)
scale = alt.Scale(domain=[f"{primlinechartvar}", f"{linechartvar}"], range=['red', 'green'])

line1 = base.mark_line(color='green').encode(
    x=alt.X('F_FW:T', axis=alt.Axis(format='%d/%m/%Y')),
    y=primlinechartvar,
    tooltip=[alt.Tooltip('F_FW:T', title='Date'), alt.Tooltip('y:Q', title=primlinechartvar)], 
    color=alt.Color('line12:N', scale=scale, title='')
).interactive()

line2 = base.mark_line(color='red').encode(
    x=alt.X('F_FW:T', axis=alt.Axis(format='%m/%Y')),
    y=linechartvar,
    tooltip=[alt.Tooltip('F_FW:T', title='Date'), alt.Tooltip('y:Q', title=linechartvar)], 
    color=alt.Color('shade12:N', scale=scale, title='')
).interactive()

combined_chart = alt.layer(line1, line2).resolve_scale(
    y='independent'
).properties(width=900, height=400, title=f'Line Chart for {primlinechartvar} and {linechartvar} vs Weeks')

st.altair_chart(combined_chart)
formatted_df = df_rounded.applymap(lambda x: f"{x:.2f}".rstrip('0').rstrip('.') if isinstance(x, float) else x)
st.table(formatted_df.style.set_properties(**{'text-align': 'center'}).set_table_styles([
    {'selector': '.row-index-name', 'props': [('font-size', '16px')]},  # Increase row index font size
    {'selector': 'td', 'props': [('font-size', '16px')]},  # Increase cell font size
    {'selector': 'th', 'props': [('font-size', '18px')]},  # Increase header font size
    {'selector': '.css-19ih76x', 'props': [('font-size', '18px')]},  # Increase table name font size
]))

st.markdown("# Table")

s1 = dict(selector='th', props=[('text-align', 'center'), ('font-size', '16px')])  # Increase font size to 16px for headers
s2 = dict(selector='td', props=[('text-align', 'center'), ('font-size', '14px')])  # Increase font size to 14px for data cells

# Apply CSS styles to the DataFrame and convert it to HTML
styled_table = formatted_df.style.set_table_styles([s1, s2]).hide(axis=0).render()

# Display the HTML table in Streamlit with increased font size
st.write(styled_table, unsafe_allow_html=True)

s1 = dict(selector='th', props=[('text-align', 'center')])
s2 = dict(selector='td', props=[('text-align', 'center')])
# you can include more styling paramteres, check the pandas docs
table = df.style.set_table_styles([s1,s2]).hide(axis=0).to_html()     
st.write(f'{table}', unsafe_allow_html=True)
